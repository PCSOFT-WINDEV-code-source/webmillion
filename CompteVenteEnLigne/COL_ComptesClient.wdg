#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : COL_ComptesClient
 major_version : 28
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x1e11e58700ca880f
 internal_properties : CAAAAAgAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  internal_properties : CAAAAAgAAADFGYh2BouVuPLXiaKfbwcODD+wsEKiw9GhNy0MNw1s6cng8NGPdYg9TaIJO10reSrcSpuxAa5AUDuoOw1F58ty2rGDVAgnQAGCDlAc72J9V/uBVr0dnHQKzFLKYWSs18ujUarQ62lHnXqSW43r/CoZ4vMzCaBA0Uacf93GS3c+Hy7v7PfiD7EH7Q==
  type_code : 31
  p_codes :
   -
     internal_properties : CAAAAAgAAACRY3S/wwSVxtHad/hMRxa/sWve/EbXNwsZkAtGmMXp+Utm2HhVcnWx0okfJkwy23yh3MgExnqBVdV8fzDN459DauLjFrYrQxU/cdnHy93h8ZDaIzpfjrUkL4cs5yxc7B9+2t6000GEVBq8bTY=
     code : |1-
      constant
      	// Options de la fonction AdresseAffichable
      	ADR_ACTIVE = 0
      	ADR_ARCHIVE = 1
      FIN
      
      
      STClient est une structure
      	IDClient est un entier
      	eMail est une chaine
      	Civilité est un entier
      	Nom est une chaine
      	Prénom est une chaine
      	TelFixe est une chaine
      	TelPortable est une chaine
      	DateCréation est une date
      FIN
      
      
      gbComptesClientsInitialisés est un booléen = faux
      
      gnAlgorithmeHashPasse est un entier = HA_SHA_256	// Algorithme utilisé pour le hachage des mots de passe (cette variable doit rester fixe pour un site donné)
      gbActivationParEmail est un booleen = Vrai			// Vrai si les comptes utilisateurs sont créés inactifs et doivent être activés par e-mail
      
      // Paramètres pour les envois de messages
      gsLoginSMTP est une chaine = ""
      gsMotDePasseSMTP est une chaine = "" 
      gsServeurSMTP est une chaine = "localhost"
      gnPortSMTP est une chaine = 25
      gsEmailExpediteurActivation est une chaine = "activation"
      gsEmailSupportTechnique est une chaine = "assistance"
      
      // Le nom du site est une chaîne utilisée dans les messages ou les e-mails envoyés depuis le site
      // Sa valeur par défaut est le nom de déploiement du site mais n'importe quelle valeur peut être utilisée
      gsNomSite est une chaine = ProjetInfo(piNomSiteDéployé)
      
      gstClientEnCours est un STClient
     type : 720896
  procedures :
   -
     name : bConnecte
     procedure_id : 2166765414062428132
     type_code : 15
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] bConnecte (<sIdentifiant> est chaîne, <sMotDePasse> est chaîne)
      //
      // Paramètres :
      //	sIdentifiant (chaîne) : <indiquez ici le rôle de sIdentifiant>
      //	sMotDePasse (chaîne) : <indiquez ici le rôle de sMotDePasse>
      // Valeur de retour :
      // 	booléen : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE bConnecte( sIdentifiant est une chaine, sMotDePasse est une chaine )
      
      // L'identifiant peut être un e-mail ou un nom d'affichage
      SI HLitRecherchePremier(Client,Email,sIdentifiant) = Faux ALORS
      	// Utilisateur inconnu
      	RENVOYER Faux
      FIN
      
      // L'utilisateur a été trouvé, il faut vérifier son mot de passe
      sHashPasse est une chaine = sHashMotDePasse(sMotDePasse)
      SI Client.MotDePasse<>sHashPasse ALORS
      	// Mot de passe incorrect
      	RENVOYER Faux
      FIN
      
      // Le mot de passe est valide, on connecte l'utilisateur en recopiant ses informations dans 
      // la structure globale de l'utilisateur en cours
      FichierVersMémoire(gstClientEnCours,Client)
      
      RENVOYER Vrai
      
      
     type : 458752
   -
     name : bEstConnecte
     procedure_id : 2166765723300145532
     type_code : 15
     code : |1-
      // Résumé : Indique si l'utilisateur est connecté au site
      // Syntaxe :
      //[ <Résultat> = ] bEstConnecte ()
      //
      // Valeur de retour :
      // 	booléen : Vrai si l'utilisateur s'est connecté au site
      //
      PROCEDURE bEstConnecte()
      
      renvoyer (gstClientEnCours.IDClient<>0)
     type : 458752
   -
     name : Deconnecte
     internal_properties : CAAAAAgAAACyU2x9rFVIgfUhDRbnOfs6io9hD7DSU+nnnuctvnCwWZH/Zy6T1LHdO4i7gxipbaLoy6NgfU12ahiTV31BwAsNQwNctNDcnJgOFGyBZJ8jmm6+q6UIVSbyKCmpXJueZg/MXLpWQ1e3eVd+iGihBg==
     procedure_id : 2166765723300211162
     type_code : 15
     code : |1+
      // Résumé : Déconnecte l'utilisateur en cours
      // Syntaxe :
      // Deconnecte ()
      //
      PROCEDURE Deconnecte()
      
       // Efface les membres de la structure globale de l'utilisateur connecté
      VariableRAZ(gstClientEnCours)
     type : 458752
   -
     name : EnvoiEmailRappelMotDePasse
     internal_properties : CAAAAAgAAAAiCc1324m8nZURDRIzqQuaIj8NgwQib2Vn9ieJMtAQeWmvq2J/TA0J+3Cznxw5lXKAEy/U4WWa2Nbxzf//Frm/4dmK8p4C2lb0OoJrOt0J/MwkAeuW27QAxqcv7iFsfBHCkkDM+Y3lL3lPKUIxlg==
     procedure_id : 2166765723300276807
     type_code : 15
     code : |1+
      // Résumé : Envoi un message de rappel de mot de passe
      // Syntaxe :
      //EnvoiEmailRappelMotDePasse (<nIDUtil> est entier, <sNouveauMotDePasse> est chaîne)
      //
      // Paramètres :
      //	nIDUtil (entier) : Identifiant de l'utilisateur
      //	sNouveauMotDePasse (chaîne) : Nouveau mot de passe
      
      PROCEDURE EnvoiEmailRappelMotDePasse( nIDUtil est un entier, sNouveauMotDePasse est une chaine )
      
      
      // Se positionne sur l'enregistrement de l'utilisateur
      HLitRecherchePremier(Client,IDClient,nIDUtil)
      
      email.Sujet = ChaîneConstruit("Réinitialisation de votre mot de passe %1",gsNomSite)
      email.Expéditeur = gsEmailExpediteurActivation
      email.Destinataire[1] = Client.Email
      email.NbDestinataire = 1
      email.Message = ChaîneConstruit(<§@1e11e57d00c85e220000§>,gsNomSite,sNouveauMotDePasse)
      
      
      // Passe le time out à 3 seconde (par défaut le serveur smtp est sur localhost, donc s'il met plus de 3 secondes à répondre, il y a un souci)
      EmailChangeTimeOut(3)
      
      si EmailOuvreSessionSMTP(gsLoginSMTP,gsMotDePasseSMTP,gsServeurSMTP,gnPortSMTP) ALORS
      	EmailEnvoieMessage(gsLoginSMTP)
      	EmailFermeSession(gsLoginSMTP)
      FIN
      
     type : 458752
   -
     name : nIDUtilisateur
     procedure_id : 2166765727595309732
     type_code : 15
     code : |1+
      // Résumé : Retourne l'identifiant de l'utilisateur connecté
      // Syntaxe :
      //[ <Résultat> = ] nIDUtilisateur ()
      //
      // Paramètres :
      //	Aucun
      
      PROCEDURE nIDUtilisateur()
      
      renvoyer gstClientEnCours.IDClient
     type : 458752
   -
     name : ReinitialiseMotDePasse
     internal_properties : CAAAAAgAAAACIxwJpUn4ucEdO7BdVeMy9guNI1pGs0lbGuVLEDjM7V0Dry6p7FWx34zdKbK5NUrIK880842Kzbn0ygICwdZKbHQdQ2VB2Rc7wYce5bB+B8vbGJT5vt8tAVJY1WT3tdgFHQsthDiIcEySmBgRtg==
     procedure_id : 2166765727595375346
     type_code : 15
     code : |1+
      // Résumé : Réinitialise le mot de passe d'un utilisateur, désactive le compte et envoi le mail d'activation
      // Syntaxe :
      //ReinitialiseMotDePasse (<sIDUtilisateur> est chaîne)
      //
      // Paramètres :
      //	sIDUtilisateur (chaîne) : Nom ou e-mail de l'utilisateur
      
      PROCEDURE ReinitialiseMotDePasse( sIDUtilisateur est une chaine )
      
      // Vérifie que le compte existe et qu'il est actif
      si pas bVerifieIdentifiantDisponible(sIDUtilisateur,vrai) ALORS
      	retour
      FIN
      
      // Génère un nouveau mot de passe
      sNouveauMDP est une chaine
      boucle (8)
      	sNouveauMDP += caract(47+Hasard(75))
      FIN
      
      // Réinitialise le compte
      Client.MotDePasse = sHashMotDePasse(sNouveauMDP)
      HModifie(Client)
      
      // Envoi l'e-mail d'activation
      EnvoiEmailRappelMotDePasse(Client.IDClient,sNouveauMDP)
      
      info(<§@1e11e57d00c85e220001§>)
     type : 458752
   -
     name : sHashMotDePasse
     internal_properties : CAAAAAgAAADXobb9lSV3YuDLwAwZzWoZWkePLF/4LMFfff4czHEpeUfycARlnl0ttkUDCsDuI0QlKIgIJn5Xm28WtRaP0a2FzLBZhACpKRuxM8cdrfvXC7xPLdb1QafLMnPKho0dGUMifVonpFI2Ftj6K3A=
     procedure_id : 2166765727595440976
     type_code : 15
     code : |1-
      // Résumé : Crypte un mot de passe et encode le résultat en Base64
      // Syntaxe :
      //[ <Résultat> = ] sHashMotDePasse (<sMotDePasse> est chaîne)
      //
      // Paramètres :
      //	sMotDePasse (chaîne) : mot de passe
      // Valeur de retour :
      // 	variant : // 	chaine
      //
      PROCEDURE sHashMotDePasse( sMotDePasse est une chaine )
      
      renvoyer Crypte(HashChaîne(gnAlgorithmeHashPasse,sMotDePasse),"",compresseAucun,encodeBASE64)
     type : 458752
   -
     name : InitialiseGestionClients
     internal_properties : CAAAAAgAAAAaKxQVJTlsOUHdOzDdVaPyNsvN49oGMwkbGiULUHhM7d2DL65pbBUx30xdKbI5dQoI6w90880KLVlUKqKiYfbqjNQ9Y0Whefdboec+hVCeJ+s7uLTZnn+NITI49QSXVfglfSvN5JioBLCmoBAJrg==
     procedure_id : 2166766118437556625
     type_code : 15
     code : |1-
      // Résumé : Permet d'initialiser la gestion des clients
      // Syntaxe :
      //[ <Résultat> = ] InitialiseGestionClients ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	booléen : Vrai si l'initialisation a été effectuée correctement, faux sinon
      
      PROCEDURE InitialiseGestionClients()
      
      declarecontexteawp(gnAlgorithmeHashPasse )
      declarecontexteawp(gbActivationParEmail )
                        
      // Paramètres pour les envoi
      declarecontexteawp(gsLoginSMTP)
      declarecontexteawp(gsMotDePasseSMTP)
      declarecontexteawp(gsServeurSMTP)
      declarecontexteawp(gnPortSMTP )
      declarecontexteawp(gsEmailExpediteurActivation )
      declarecontexteawp(gsEmailSupportTechnique)
                        
      // Initialisation déjà faite ?
      declarecontexteawp(gbComptesClientsInitialisés)
      declarecontexteawp(gstClientEnCours)
      
      si gbComptesClientsInitialisés = faux ALORS
      	// l'initialisation n'avait pas encore été faite, on note qu'elle a été faite
      	gbComptesClientsInitialisés = Vrai
      	renvoyer vrai
      FIN
      
      // C'est pas l'init, on a remis les valeurs comme elles avaient été sauvegardées
      renvoyer faux
     type : 458752
   -
     name : bVerifieIdentifiantDisponible
     internal_properties : CAAAAAgAAABk2piQTHc9frUYXC8sGrFNdcD6A/V8pr7a2vCJUrrLdXKYnWF8rhmA8NMIXOr9X7Ar7TD9Wujp9jHrkBgEgeqfpH9wUx6NSVSV/qWEdwJENj3QB7p0JHM=
     procedure_id : 2166768012518181445
     type_code : 15
     code : |1-
      // Résumé : Vérifie qu'un identifiant n'est pas déjà utilisé (comme e-mail ou nom d'affichage)
      // Syntaxe :
      //[ <Résultat> = ] bVerifieIdentifiantDisponible (<sIdentifiant> est chaîne [, <bBloqueEnreg> est booléen])
      //
      // Paramètres :
      //	sIdentifiant (chaîne) : Chaîne à vérifier
      //	bBloqueEnreg (booléen - valeur par défaut=0) : indique si la lecture doit bloquer l'enregistrement
      // Valeur de retour :
      // 	booléen : Vrai si l'identifiant n'existe ni en tant qu'e-mail, ni en tant que nom d'affichage
      //
      PROCEDURE bVerifieIdentifiantDisponible( sIdentifiant est une chaine, bBloqueEnreg est un booleen = faux )
      
      nFlag est un entier = hBlocageNon
      si bBloqueEnreg alors nFlag = hBlocageEcriture
      
      // Vérification des e-mails
      si HLitRecherchePremier(Client,Email,sIdentifiant,nFlag) alors
      	renvoyer faux
      FIN
      
      // Vérification des noms d'affichage
      si HLitRecherchePremier(Client,Nom,sIdentifiant,nFlag) alors
      	renvoyer faux
      FIN
      
      // L'identifiant est libre
      renvoyer vrai
     type : 458752
   -
     name : AdresseAffichable
     procedure_id : 2167503195004416927
     type_code : 15
     code : |1-
      // Résumé :  Permet de récupérer une adresse affichage
      // Syntaxe :
      //[ <Résultat> = ] AdresseAffichable (<nIDAdresse> est entier, <nOption> est entier)
      //
      // Paramètres :
      //	nIDAdresse (entier) : L'identifiant de l'adresse
      //	nOption (entier) : < indiquez ici le rôle de bAdresseArchivée >
      
      PROCEDURE AdresseAffichable(nIDAdresse est un entier, nOption est un entier )
      
      bAdresseArchivée est un booleen = (etbinaire(nOption,ADR_ARCHIVE)>0)
      
      sdAdresse est une source de données
      sAdresse est une chaine
      // On crée un alias sur le bon fichier et c'est cet alias que l'on va manipuler
      si bAdresseArchivée ALORS
      	HAlias(AdresseArchive,sdAdresse)
      	HChangenom(sdAdresse, AdresseArchive..NomPhysique)
      sinon
      	HAlias(Adresse,sdAdresse)
      	HChangeNom(sdAdresse, Adresse..NomPhysique)
      FIN
      
      // Recherche de l'adresse
      hlitrecherchepremier(sdAdresse,IDAdresse,nIDAdresse)
      si htrouve(sdAdresse) alors
      	// Formatage de l'adresse
      	sAdresse = sdAdresse.Societe
      	sAdresse += [RC] + sdAdresse.Voie
      	sAdresse += [RC] + sdAdresse.Complement
      	sAdresse += [RC] + sdAdresse.LieuDitBP
      	sAdresse += [RC] + sdAdresse.CodePostal + [" "] + sdAdresse.Ville
      	sAdresse += [RC] + sdAdresse.EtatProvince
      	sAdresse += [RC] + sdAdresse.Pays
      fin
      
      // on renvoie l'adresse formatée
      renvoyer sAdresse
      
      FIN:
      HannuleAlias(sdAdresse)
     type : 458752
   -
     name : CivilitéVersChaine
     procedure_id : 2167851916271032879
     type_code : 15
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] CivilitéVersChaine (<nCivilité> [, <bAbrégée>])
      //
      // Paramètres :
      //	nCivilité : <indiquez ici le rôle de nCivilité>
      // 	bAbrégée (valeur par défaut=1) : < indiquez ici le rôle de bAbrégée >
      // Valeur de retour :
      // 	chaîne : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE CivilitéVersChaine(nCivilité, bAbrégée = vrai)
      
      si bAbrégée ALORS
      	selon nCivilité
      		cas 1 // Monsieur
      			renvoyer "M."
      		cas 2 // Madame
      			renvoyer "Mme"
      		cas 3 // Mademoiselle
      			renvoyer "Mlle"
      		AUTRE CAS
      			dbgassertion(faux,"Civilité inconnue")
      			Renvoyer ""
      	FIN
      SINON
      	SELON nCivilité
      		CAS 1 // Monsieur
      			RENVOYER "Monsieur"
      		CAS 2 // Madame
      			RENVOYER "Madame"
      		CAS 3 // Mademoiselle
      			RENVOYER "Mademoiselle"
      		AUTRE CAS
      			dbgAssertion(Faux,"Civilité inconnue")
      			RENVOYER ""
      	FIN
      	
      FIN
     type : 458752
   -
     name : VérifieConnexion
     procedure_id : 2167860437496193295
     type_code : 15
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //VérifieConnexion ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE VérifieConnexion()
      
      SI bEstConnecte() = Faux ALORS
      	PageAffiche(connexion)
      FIN
     type : 458752
   -
     name : nNbAdresse
     internal_properties : CAAAAAgAAADiYz01Uz6CvSZ2Z9DPxWvmaKV6ddr3mbA1Pzo0+PUgz54HbVHX45lo6SrDQbjsHvl03+FAquzX6mUFqiQxKKcqr5Wt8qJQRfS9DgwvdYiNIgl21Xx/UiX21Kbz5DUA7SQJ1uTX3Omm7Zpuxt05
     procedure_id : 2168216447335534728
     type_code : 15
     code : |1-
      // Résumé : Retourne le nombre d'adresses pour le client en cours
      // Syntaxe :
      //[ <Résultat> = ] nNbAdresse ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Type indéterminé : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE nNbAdresse()
      
      dbgAssertion(gstClientEnCours.IDClient<>0,"Il faut être connecté pour appeler cette fonction")
      
      si HExécuteRequête(REQ_NombreAdresseClient,hRequêteDéfaut,gstClientEnCours.IDClient) ALORS
      	renvoyer REQ_NombreAdresseClient.nNbAdresse
      FIN
      
      dbgAssertion(faux,"Echec de l'exécution de la requête")
      renvoyer 0
     type : 458752
   -
     name : AdresseNomComplet
     procedure_id : 2235700777370345153
     type_code : 15
     code : |1-
      // Résumé :  Permet de récupérer une adresse affichage
      // Syntaxe :
      //[ <Résultat> = ] AdresseNomComplet (<nIDAdresse> est entier, <nOption> est entier)
      //
      // Paramètres :
      //	nIDAdresse (entier) : L'identifiant de l'adresse
      //	nOption (entier) : <indiquez ici le rôle de nOption>
      
      PROCEDURE AdresseNomComplet(nIDAdresse est un entier, nOption est un entier )
      
      bAdresseArchivée est un booleen = (etbinaire(nOption,ADR_ARCHIVE)>0)
      
      sdAdresse est une source de données
      
      // On crée un alias sur le bon fichier et c'est cet alias que l'on va manipuler
      si bAdresseArchivée ALORS
      	HAlias(AdresseArchive,sdAdresse)
      	HChangenom(sdAdresse, AdresseArchive..NomPhysique)
      sinon
      	HAlias(Adresse,sdAdresse)
      	HChangeNom(sdAdresse, Adresse..NomPhysique)
      FIN
      
      // Recherche de l'adresse
      hlitrecherchepremier(sdAdresse,IDAdresse,nIDAdresse)
      si htrouve(sdAdresse) alors
      	// Formatage de l'adresse
      	// on renvoie l'adresse formatée
      	RENVOYER sdAdresse.NomComplet
      
      fin
      
      dbgassertion(faux,"Adresse introuvable")
      renvoyer ""
      
      
      FIN:
      HannuleAlias(sdAdresse)
     type : 458752
   -
     name : EnvoiDemande
     internal_properties : CAAAAAgAAACymT1Ha9lE/SVB7XLzKcvqQs+d88Ty/9VH9ve5wgBgubnPKwLPDO3pK0Bzf3zZ9QKAAx/EAVUK8K7pNYeXnjEneXGi+oZ6cu5skuoTkkWBhESceVPes6y4Pj831hkU9Bn6Clg04cW9P0mf+bKhBg==
     procedure_id : 2235792642379137034
     type_code : 15
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] EnvoiDemande (<sDemande>)
      //
      // Paramètres :
      //	sDemande : <indiquez ici le rôle de sDemande>
      // Valeur de retour :
      // 	booléen : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE EnvoiDemande(sDemande)
      
      bRes est un booléen
      
      Email.Sujet = ChaîneConstruit("Demande depuis le site : ",gsNomSite)
      Email.Expéditeur = gsEmailExpediteurActivation
      Email.Destinataire[1] = gsEmailSupportTechnique
      Email.NbDestinataire = 1
      Email.Message = sDemande
      
      
      // Passe le time out à 3 seconde (par défaut le serveur smtp est sur localhost, donc s'il met plus de 3 secondes à répondre, il y a un souci)
      EmailChangeTimeOut(3)
      
      SI EmailOuvreSessionSMTP(gsLoginSMTP,gsMotDePasseSMTP,gsServeurSMTP,gnPortSMTP) ALORS
      	
      	bRes = EmailEnvoieMessage(gsLoginSMTP)
      	EmailFermeSession(gsLoginSMTP)
      sinon
      	bRes = faux
      FIN
      
      renvoyer bRes
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
  original_name : COL_SansNom1
resources :
 string_res :
  identifier : 0x1e11e57d00c85e22
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
  strings :
   -
     text :
      fr-FR : "Bonjour,\r\n\r\nVotre mot de passe sur le site %1 a été réinitialisé.\r\nVotre nouveau mot de passe est : %2\r\n\r\nCordialement,\r\nL'équipe %1\r\n"
     index : 0
   -
     text :
      fr-FR : Un nouveau mot de passe a été généré et vous a été envoyé par email.
     index : 1
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
